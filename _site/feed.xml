<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nela Blog</title>
    <description>Android 系统和应用层开发  | Nela，Android &amp; Mobile  | 这里是 @Nela 的个人博客，与你一起发现更大的世界。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 02 Jan 2018 22:57:18 +0800</pubDate>
    <lastBuildDate>Tue, 02 Jan 2018 22:57:18 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>我的第一篇blog</title>
        <description>
</description>
        <pubDate>Tue, 02 Jan 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/02/responsive-web/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/02/responsive-web/</guid>
        
        <category>前端开发</category>
        
        
      </item>
    
      <item>
        <title>「知乎」你们觉得响应式好呢，还是手机和PC端分开来写？</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;这篇文章转载自&lt;a href=&quot;http://www.zhihu.com/question/25836425/answer/31564174&quot;&gt;我在知乎上的回答&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
	&lt;p&gt;
		&lt;b&gt;根据你的产品特点，进行两种不同的设计，&lt;/b&gt;
	    &lt;br /&gt;&lt;b&gt;根据你的设计需求，选择合适的技术方案&lt;/b&gt;。
    &lt;/p&gt;
    &lt;br /&gt;&lt;b&gt;A与B不是硬币的正反面，它们为了解决同一个问题而生，它们是同一种思想的延伸。&lt;/b&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;blockquote&gt;移动和桌面设计的差别远不止是布局问题。只要有足够的编程量，这些差别是可以通过响应式设计来解决的。事实上，你可以认为如果一种设计不能兼顾两种平台的主要差别，就不能算是合格的响应式设计。但是，如果确实想要处理好平台间的所有差异，我们就回到了原点：进行两种不同的设计。
        &lt;br /&gt;
        &lt;br /&gt;——《Mobile Usability》（《贴心设计 打造高可用性的移动产品》）&lt;/blockquote&gt;
    &lt;br /&gt;
    &lt;br /&gt;其实无论是什么解决方案，我们先来看看我们想要解决的问题：
    &lt;br /&gt;
    &lt;br /&gt;&lt;b&gt;“屏幕尺寸越来越多，不同设备的交互特质也有着巨大的差别，我们希望我们的网站能够在移动手机、平板、桌面电脑，在键鼠、触摸、无障碍设备上都有优秀的用户体验。所以，我们需要网站的用户界面在不同的平台上有所不同。”&lt;/b&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;那怎么做呢，一个解决方案应运而生：
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;b&gt;响应式设计 (Responsive Web design)&lt;/b&gt;
        &lt;/li&gt;
    &lt;/ul&gt;&lt;b&gt;狭义上&lt;/b&gt;，我们把&lt;b&gt;主要依靠前端 CSS&lt;/b&gt; （包括 Media Query 媒体查询，百分比流式布局，网格与Typography系统……）来对各种屏幕尺寸进行响应的做法，称之为响应式布局，又称作自适应网页设计，或者弹性设计。
    &lt;br /&gt;
    &lt;br /&gt;这种主要依靠CSS的方案有很多优点，比如：
    &lt;br /&gt;
    &lt;ul&gt;
        &lt;ul&gt;
            &lt;li&gt;设计元素很容易被复用，设计成本低&lt;/li&gt;
            &lt;li&gt;前端只需要维护一套CSS代码，&lt;b&gt;维护成本&lt;/b&gt;低&lt;/li&gt;
            &lt;li&gt;桌面端与移动端的设计十分接近，令用户感到“熟悉”&lt;/li&gt;
            &lt;li&gt;不需要任何服务器端的支持&lt;/li&gt;
            &lt;li&gt;与业务耦合程度低，复用程度高（ 以至于 Bootstrap、Foundation 等一干框架都跟进了这个解决方案 ）&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;但问题也很明显，比如：
    &lt;br /&gt;
    &lt;ul&gt;
        &lt;ul&gt;
            &lt;li&gt;设计需求复杂时，前端的&lt;b&gt;开发成本&lt;/b&gt;没有任何减轻&lt;/li&gt;
            &lt;li&gt;无论是针对桌面还是移动的CSS代码（甚至图片资源文件）都会被同等的下载到客户端（&lt;b&gt;没有考虑移动端的网络优化&lt;/b&gt;）&lt;/li&gt;
            &lt;li&gt;如果JS不写两套，桌面端的交互和移动端的交互很难针对平台作出差异&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;
    &lt;br /&gt;
    &lt;br /&gt;如果&lt;b&gt;你的&lt;/b&gt;&lt;b&gt;移动用户对网站所有的功能和内容有着与桌面用户同等的需求&lt;/b&gt;，比如 新闻、报纸（媒体类）网站，或者活动、专题页等 &lt;b&gt;偏重信息传达而轻交互 &lt;/b&gt;的网站，那么这个解决方案其实恰到好处：
    &lt;br /&gt;&lt;b&gt;触摸屏优化（胖手指）、减少次要信息…… 这些通过 CSS 解决就够了。&lt;/b&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;&lt;b&gt;但是，如果我想要做更多的 「移动化设计」，比如 减少信息层级、增强手势操作、让网页更接近一个Native App ？&lt;/b&gt;
    &lt;br /&gt;
    &lt;br /&gt;好吧，为了更复杂的需求，为了我们的网站能更牛逼的 &lt;b&gt;「响应」&lt;/b&gt; 各个平台，
    &lt;br /&gt;又有了这些解决方案：
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;b&gt;服务器端（后端）：&lt;/b&gt;
            &lt;br /&gt;
        &lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;RESS （Responsive Web Design with Server Side Components）通过服务器端组件的响应式网页设计&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;提倡 RESS 的人认为：基于前端 CSS 的响应式方案只是一种妥协：
    &lt;br /&gt;&lt;b&gt;“ UI 只是在很被动的进行「调整」，而不能真正达到各个平台的最优。好的设计应该达到「这个设备该有的体验」（Device Experiences）。 ”&lt;/b&gt;
    &lt;br /&gt;
    &lt;blockquote&gt;&lt;b&gt;Device Experiences ：&lt;/b&gt;A device experience is defined by how a device is most commonly used and the technical capabilities or limitations it possesses.&lt;/blockquote&gt;RESS 的本质还是服务器端动态的生成，返回 HTML、JS、CSS、图像等资源文件，但是只使用同一个 URL 就可以提供给移动端定制化更强的网页，同时还大大节省了网络资源。
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;b&gt;前端&lt;/b&gt;（主要是JS），比如：
            &lt;br /&gt;
        &lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;在 JavaScript 中实现两套逻辑，分别兼容键鼠、触摸设备&lt;/li&gt;
            &lt;li&gt;通过 UA、特性检测 在前端做设备判断，对资源进行异步加载，渲染不同模版&lt;/li&gt;
            &lt;li&gt;通过 特性检测 在前端做设备判断，使用不同的业务逻辑&lt;/li&gt;
            &lt;li&gt;前端的模块化也可以帮助解决这个问题，比如针对不同的平台加载不同的模块&lt;/li&gt;
            &lt;li&gt;……&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;
    &lt;br /&gt;
    &lt;br /&gt;这下，我们的网站可以更牛逼的 &lt;b&gt;“响应”&lt;/b&gt; 各个平台了。
    &lt;br /&gt;（对，我还是称之为响应：这的确还是在&lt;b&gt;“响应”&lt;/b&gt;啊 ，不是吗？）
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;&lt;b&gt;但是等下……&lt;/b&gt;
    &lt;br /&gt;后端开发成本上去了，前端开发成本也上去了，配合着估计产品、设计资源也都上去了，&lt;b&gt;那我们为什么不干脆把 移动设备网站 和 桌面设备网站 分开呢！？&lt;/b&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;是啊，如果你的需求真的都到这一步了，你的移动网站也应该可以被称作 WebApp 了。&lt;b&gt;这种时候，把移动设备网站彻底分开或许真的是更好的选择。&lt;/b&gt;
    &lt;br /&gt;
    &lt;br /&gt;开发资源如此充足，你还可以让专门的团队来维护移动端的网站。
    &lt;br /&gt;（嗯，BAT 就是这么干的）
    &lt;br /&gt;
    &lt;br /&gt;于是又一个概念来了：
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;b&gt;独立的移动版网站&lt;/b&gt; （按题主的话来说：手机和PC端分开来写）&lt;/li&gt;
    &lt;/ul&gt;不过，它有那么独立么？
    &lt;br /&gt;我们知道，我们访问网站是通过 URL 来访问的。
    &lt;br /&gt;将移动网站 和 桌面网站 分开，如果不使用 RESS 技术，往往也就意味着要维护两个URL（不同的二级域名）
    &lt;br /&gt;难道我们要让所有桌面用户自觉访问 &lt;a href=&quot;http://taobao.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;taobao.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，所有 移动用户 都自觉访问 &lt;a href=&quot;http://m.taobao.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;m.taobao.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ？
    &lt;br /&gt;
    &lt;br /&gt;不可能吧 ＝ ＝。
    &lt;br /&gt;
    &lt;br /&gt;于是，我们还是得依靠前端或服务器端的一次 &lt;b&gt;“响应”&lt;/b&gt;（设备检测），做 URL 重定向，才能将不同设备的用户带到那个为他们准备的网站。
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;&lt;b&gt;所以其实在我看来，手机和PC端分开来写，只是 狭义响应式设计 的一种发展和延伸罢了。他们的界限没有，也并不需要那么清晰。&lt;/b&gt;
    &lt;br /&gt;
    &lt;br /&gt;就如开题所引用的：
    &lt;br /&gt;
    &lt;blockquote&gt;&lt;b&gt;事实上，你可以认为如果一种设计不能兼顾两种平台的主要差别，就不能算是合格的响应式设计。&lt;/b&gt;
    &lt;/blockquote&gt;&lt;b&gt;“而无论是用什么解决方案。” —— 这句是我补的。&lt;/b&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;故我的结论是：
    &lt;br /&gt;
    &lt;br /&gt;&lt;b&gt;这不是一个二选一的问题，而是选择一个合适的度&lt;/b&gt;（你的桌面版本代码与移动版本代码分离、耦合的程度）
    &lt;br /&gt;
    &lt;br /&gt;而这个度，则是由你的设计需求决定的。
    &lt;br /&gt;而我们的需求原点其实也很简单：
    &lt;br /&gt;
    &lt;br /&gt; “&lt;b&gt;根据你的产品特点，进行两种不同的设计&lt;/b&gt;”。
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;br /&gt;以上。
    &lt;br /&gt;
    &lt;br /&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 20 Nov 2014 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2014/11/20/responsive-web-design/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/11/20/responsive-web-design/</guid>
        
        <category>知乎</category>
        
        <category>前端开发</category>
        
        
      </item>
    
  </channel>
</rss>
